\input texinfo.tex
@c %**start of header
@setfilename vicare-expat.info
@settitle Expat backend for Vicare
@c %**end of header

@include version.texi
@include macros.texi

@macro expatref{NODE, TITLE}
@xref{\NODE\,\TITLE\,\TITLE\,expat}
@end macro


@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Expat backend for Vicare

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Vicare/Expat

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           vicare-expat

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi.ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2012


@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @version{} of @value{PACKAGE}, a
distribution of C and Scheme libraries for Vicare Scheme, an @rnrs{6}
compliant Scheme implementation; it provides bindings for the Expat C
language library, an @axml{} parser library.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}

@noindent
Expat is available at:

@center @url{http://expat.sourceforge.net/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* vicare-expat: (vicare-expat). @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* parsers::                     Building and running parsers.
* handlers::                    Building and registering callbacks.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


Vicare Scheme is an @rnrs{6} compliant Scheme language implementation in
the form of a native compiler for x86 architectures, officially
supporting @gnu{}+Linux systems.  @value{PACKAGE} is a distribution of C
language and Scheme language libraries for Vicare Scheme; it provides
bindings for the Expat C language library, an @axml{} parser library.

While @value{PACKAGE} can be used alone, its purpose is to provide a
backend Expat interface for Nausicaa/Expat: a higher level interface
adding syntactic sugar.

The last time the author bothered to update this paragraph, he had
tested Expat version 2.0.1; the Expat library is available at:

@center @url{http://expat.sourceforge.net/}

@noindent
notice that unofficial Expat documentation in Texinfo format is
available in the Nimby-Doc project at:

@center @url{http://github.com/marcomaggi/nimby-doc}

@noindent
and also online:

@center @url{http://marcomaggi.github.com/docs/expat.html}

Expat must be compiled to handle @utf{}-8 strings.

The package installs a C language library implementing wrapper C
functions for the C language Expat library; on top of this, the Scheme
library @library{vicare expat} exports one binding for each Expat public
function, with the exception of:

@example
XML_ParserCreateMM
XML_MemMalloc
XML_MemRealloc
XML_MemFree
@end example

@noindent
additionally the library @library{vicare expat constants} exports one
binding for each constant value defined in the C language header
@file{expat.h}.

Here is an example program:

@example
#!r6rs
(import (vicare)
  (vicare expat)
  (vicare expat constants)
  (prefix (vicare ffi) ffi.))

(define xml-utf8
  (string->utf8
   "<!-- this is a test document -->\
   <stuff>\
   <thing colour=\"yellow\">\
   <alpha>one</alpha>\
   <beta>two</beta>\
   </thing>\
   <thing>\
   <alpha>123</alpha>\
   <beta>456</beta>\
   </thing>\
   </stuff>"))

(define (start-callback data element attributes)
  (let ((element    (ffi.cstring->string element))
        (attributes (ffi.argv->strings attributes)))
    (pretty-print (list 'start element attributes))))

(define (end-callback data element)
  (let ((element (ffi.cstring->string element)))
    (pretty-print (list 'end element))))

(define (cdata-callback data buf.ptr buf.len)
  (let ((text (ffi.cstring->string buf.ptr buf.len)))
    (pretty-print (list 'cdata text))))

(define (comment-callback data cstr)
  (let ((text (ffi.cstring->string cstr)))
    (pretty-print (list 'comment text))))

(let ((parser   (XML_ParserCreate 'UTF-8))
      (start    (XML_StartElementHandler  start-callback))
      (end      (XML_EndElementHandler    end-callback))
      (cdata    (XML_CharacterDataHandler cdata-callback))
      (comment  (XML_CommentHandler       comment-callback)))
  (XML_SetElementHandler       parser start end)
  (XML_SetCharacterDataHandler parser cdata)
  (XML_SetCommentHandler       parser comment)
  (XML_Parse parser xml-utf8 #f #t)
  (ffi.free-c-callback start)
  (ffi.free-c-callback end)
  (ffi.free-c-callback cdata)
  (ffi.free-c-callback comment))

(flush-output-port (current-output-port))
@end example

@noindent
which prints:

@example
(comment " this is a test document ")
(start "stuff" ())
(start "thing" ("colour" "yellow"))
(start "alpha" ())
(cdata "one")
(end "alpha")
(start "beta" ())
(cdata "two")
(end "beta")
(end "thing")
(start "thing" ())
(start "alpha" ())
(cdata "123")
(end "alpha")
(start "beta" ())
(cdata "456")
(end "beta")
(end "thing")
(end "stuff")
@end example

@c page
@node parsers
@chapter Building and running parsers


@menu
* parsers create::              Creating parsers.
* parsers external::            Creating external entities parsers.
* parsers parsing::             Parsing data.
@end menu

@c page
@node parsers create
@section Creating parsers


All the following bindings are exported by the @library{vicare expat}
library.


@defun XML_ParserCreate
@defunx XML_ParserCreate @var{encoding}
@expatref{api create, XML_ParserCreate}.  Build a new parser and return
a pointer object referencing it.  Values returned by this function must
be finalised with @func{XML_ParserFree}; this will happen automatically
when the pointer object is garbage collected.

The optional @var{encoding} must be one of the Scheme symbols:
@code{UTF-8}, @code{UTF-16}, @code{ISO-8859-1}, @code{US-ASCII} or
@false{}; when @var{encoding} is not used or it is @false{}: the parser
will honour the encoding specification in the document.
@end defun


@defun XML_ParserCreateNS @var{encoding} @var{namespace-separator}
@expatref{api create, XML_ParserCreateNS}.  Build a new parser, having
namespace processing in effect, and return a pointer object referencing
it.  Values returned by this function must be finalised with
@func{XML_ParserFree}; this will happen automatically when the pointer
object is garbage collected.

@var{encoding} is as in @func{XML_ParserCreate}.
@var{namespace-separator} must be a Scheme character in the @ascii{}
range.
@end defun


@defun XML_ParserFree @var{parser}
@expatref{api create, XML_ParserFree}.  Release all the resource
associated to the pointer object @var{parser}, then mutate @var{parser}
to represent the @cnull{} pointer; return unspecified values.  It is
safe to apply this function multiple times to the same @var{parser}
object: the first time it will release the resources, subsequent times
nothing will happen.
@end defun


@defun XML_ParserReset @var{parser} @var{encoding}
@expatref{api create, XML_ParserReset}.  Reset a parser so that it can
be used again; return a boolean value: @true{} if success, @false{} if
this parser cannot be reset.  @var{encoding} is as in
@func{XML_ParserCreate}.
@end defun

@c page
@node parsers external
@section Creating external entities parsers


All the following bindings are exported by the @library{vicare expat}
library.


@defun XML_SetParamEntityParsing @var{parser} @var{code}
@expatref{api misc, XML_SetParamEntityParsing}.  Enable or disable
external entity parsing according to @var{code}, which must be a fixnum
among:

@example
XML_PARAM_ENTITY_PARSING_NEVER
XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE
XML_PARAM_ENTITY_PARSING_ALWAYS
@end example
@end defun


@defun XML_ExternalEntityParserCreate @var{parser} @var{context} @var{encoding}
@expatref{api create, XML_ExternalEntityParserCreate}.  Build a new
parser to parse an external entity for @var{parser} and return a pointer
object referencing it.  Values returned by this function must be
finalised with @func{XML_ParserFree}; this will happen automatically
when the pointer object is garbage collected.

@var{parser} is a pointer object to the main parser.  @var{context} must
be a pointer object.  @var{encoding} is as in @func{XML_ParserCreate}.
@end defun


The following is a skeleton program showing how to parse an external
@dtd{}:

@smallexample
#!r6rs
(import (vicare)
  (vicare expat)
  (vicare expat constants)
  (prefix (vicare ffi) ffi.))

(define xml-utf8
  (string->utf8
    "<!DOCTYPE toys SYSTEM 'http://localhost/toys'>
     <toys><ball colour='red'/></toys>"))

(define dtd-utf8
  (string->utf8
    "<!ELEMENT ball EMPTY>
     <!ATTLIST ball colour CDATA #REQUIRED>"))

(define (handler parser context base system-id public-id)
  (let ((parser (XML_ExternalEntityParserCreate
                   parser context 'UTF-8)))
    (XML_Parse parser dtd-utf8 #f #t)
    XML_STATUS_OK))

(let* ((parser  (XML_ParserCreate 'UTF-8))
       (cb      (XML_ExternalEntityRefHandler scheme-callback)))
  (XML_SetParamEntityParsing parser
     XML_PARAM_ENTITY_PARSING_ALWAYS)
  (XML_SetExternalEntityRefHandler parser cb)
  (XML_Parse parser xml-utf8 #f #t)
  (ffi.free-c-callback cb))
@end smallexample

@c page
@node parsers parsing
@section Parsing data


All the following bindings are exported by the @library{vicare expat}
library.


@defun XML_Parse @var{parser} @var{buffer} @var{buflen} @var{final?}
@expatref{api parse, XML_Parse}.
@end defun


@c page
@node handlers
@chapter Building and registering callbacks


In the descriptions of this chapters: @var{scheme-callback} is a Scheme
function used as callback; @var{parser} is a pointer of type
@code{XML_Parser}; @var{c-callback}, @var{start-c-callback} and
@var{end-c-callback} are pointers referencing C language callbacks.

@menu
* handlers dtd attlist::        @dtd{} attribute lists.
* handlers misc::               Miscellaneous handlers.
@end menu

@c page
@node handlers dtd attlist
@section @dtd{} attribute lists


All the following bindings are exported by the @library{vicare expat}
library.


@defun XML_AttlistDeclHandler @var{scheme-callback}
@defunx XML_SetAttlistDeclHandler @var{parser} @var{c-callback}
Maker and setter for handlers of attributes list in the @dtd{}.  The
following program:

@smallexample
#!r6rs
(import (vicare)
  (vicare expat)
  (vicare expat constants)
  (prefix (vicare ffi) ffi.))

(define xml-utf8
  (string->utf8
   "<!DOCTYPE toys [
     <!ELEMENT ball EMPTY>
     <!ATTLIST ball colour CDATA #REQUIRED>
   ]>
   <toys><ball colour='red' /></toys>"))

(define (scheme-callback user-data element-name attribute-name
                         attribute-type default-value required?)
  (let ((element-name    (ffi.cstring->string element-name))
        (attribute-name  (ffi.cstring->string attribute-name))
        (attribute-type  (ffi.cstring->string attribute-type))
        (default-value   (if (ffi.pointer-null? default-value)
                             'NULL
                           (ffi.cstring->string default-value))))
    (pretty-print (list element-name attribute-name
                        attribute-type default-value
                        required?))))

(let ((parser  (XML_ParserCreate 'UTF-8))
      (cb      (XML_AttlistDeclHandler scheme-callback)))
  (XML_SetAttlistDeclHandler parser cb)
  (XML_Parse parser xml-utf8 #f #t)
  (ffi.free-c-callback cb))

(flush-output-port (current-output-port))
@end smallexample

@noindent
prints:

@example
("ball" "colour" "CDATA" NULL 1)
@end example
@end defun

@c page
@node handlers misc
@section Miscellaneous handlers


@defun XML_SetCdataSectionHandler @var{parser} @var{start-c-callback} @var{end-c-callback}
@end defun


@defun XML_CharacterDataHandler @var{scheme-callback}
@defunx XML_SetCharacterDataHandler @var{parser} @var{c-callback}
@end defun


@defun XML_StartCdataSectionHandler @var{scheme-callback}
@defunx XML_SetStartCdataSectionHandler @var{parser} @var{c-callback}
@end defun


@defun XML_EndCdataSectionHandler @var{scheme-callback}
@defunx XML_SetEndCdataSectionHandler @var{parser} @var{c-callback}
@end defun


@c ------------------------------------------------------------

@defun XML_CommentHandler @var{scheme-callback}
@defunx XML_SetCommentHandler @var{parser} @var{c-callback}
@end defun

@c ------------------------------------------------------------


@defun XML_DefaultHandler @var{scheme-callback}
@defunx XML_SetDefaultHandler @var{parser} @var{c-callback}
@end defun


@defun XML_SetDefaultHandlerExpand @var{parser} @var{c-callback}

@end defun


@defun XML_ElementDeclHandler @var{scheme-callback}
@defunx XML_SetElementDeclHandler @var{parser} @var{c-callback}
@end defun

@c ------------------------------------------------------------

@defun XML_SetDoctypeDeclHandler @var{parser} @var{start-c-callback} @var{end-c-callback}
@end defun


@defun XML_EndDoctypeDeclHandler @var{scheme-callback}
@defunx XML_SetEndDoctypeDeclHandler @var{parser} @var{c-callback}
@end defun

@c ------------------------------------------------------------

@defun XML_SetElementHandler @var{parser} @var{start-c-callback} @var{end-c-callback}

@end defun


@defun XML_EndElementHandler @var{scheme-callback}
@defunx XML_SetEndElementHandler @var{parser} @var{c-callback}
@end defun

@c ------------------------------------------------------------

@defun XML_SetNamespaceDeclHandler @var{parser} @var{start-c-callback} @var{end-c-callback}

@end defun


@defun XML_EndNamespaceDeclHandler @var{scheme-callback}
@defunx XML_SetEndNamespaceDeclHandler @var{parser} @var{c-callback}
@end defun


@defun XML_EntityDeclHandler @var{scheme-callback}
@defunx XML_SetEntityDeclHandler @var{parser} @var{c-callback}
@end defun


@defun XML_ExternalEntityRefHandler @var{scheme-callback}
@defunx XML_SetExternalEntityRefHandler @var{parser} @var{c-callback}
@end defun


@defun XML_NotStandaloneHandler @var{scheme-callback}
@defunx XML_SetNotStandaloneHandler @var{parser} @var{c-callback}
@end defun


@defun XML_NotationDeclHandler @var{scheme-callback}
@defunx XML_SetNotationDeclHandler @var{parser} @var{c-callback}
@end defun


@defun XML_ProcessingInstructionHandler @var{scheme-callback}
@defunx XML_SetProcessingInstructionHandler @var{parser} @var{c-callback}
@end defun


@defun XML_SkippedEntityHandler @var{scheme-callback}
@defunx XML_SetSkippedEntityHandler @var{parser} @var{c-callback}
@end defun


@defun XML_StartDoctypeDeclHandler @var{scheme-callback}
@defunx XML_SetStartDoctypeDeclHandler @var{parser} @var{c-callback}
@end defun


@defun XML_StartElementHandler @var{scheme-callback}
@defunx XML_SetStartElementHandler @var{parser} @var{c-callback}
@end defun


@defun XML_StartNamespaceDeclHandler @var{scheme-callback}
@defunx XML_SetStartNamespaceDeclHandler @var{parser} @var{c-callback}
@end defun


@defun XML_UnknownEncodingHandler @var{scheme-callback}
@defunx XML_SetUnknownEncodingHandler @var{parser} @var{c-callback}
@end defun


@defun XML_UnparsedEntityDeclHandler @var{scheme-callback}
@defunx XML_SetUnparsedEntityDeclHandler @var{parser} @var{c-callback}
@end defun


@defun XML_XmlDeclHandler @var{scheme-callback}
@defunx XML_SetXmlDeclHandler @var{parser} @var{c-callback}
@end defun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @url{http://marcomaggi.github.com/docs/vicare-expat.html}

@noindent
the latest version of this package can be downloaded from:

@center @url{http://github.com/marcomaggi/vicare-expat/downloads}

@noindent
development takes place at:

@center @url{http://github.com/marcomaggi/vicare-expat/}

@noindent
the home page of the Vicare project is at:

@center @url{http://marcomaggi.github.com/vicare.html}

@noindent
the home page of the Nausicaa project is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
Expat can be found here:

@center @url{http://expat.sourceforge.net/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

